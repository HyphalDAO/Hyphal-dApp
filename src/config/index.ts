import {isAddress} from "@ethersproject/address"
import {urlRegex} from "../utlls"
import {DEFAULT_CONFIG, DEFAULT_FIREBASE_CONFIG} from "./default"

/* eslint-disable no-process-env */
const {
	REACT_APP_FIREBASE_API_KEY,
	REACT_APP_FIREBASE_AUTH_DOMAIN,
	REACT_APP_FIREBASE_PROJECT_ID,
	REACT_APP_FIREBASE_STORAGE_BUCKET,
	REACT_APP_FIREBASE_MESSAGING_SENDER_ID,
	REACT_APP_FIREBASE_APP_ID,
	REACT_APP_CLOUD_FUNCTIONS_URL,
	REACT_APP_IPFS_ENDPOINT,
	REACT_APP_CHAIN_ID,
	REACT_APP_INFURA_NETWORK,
	REACT_APP_INFURA_ID,
	REACT_APP_DOMAIN_ADDRESS,
	REACT_APP_GNOSIS_SAFE_PROXY_FACTORY_ADDRESS,
	REACT_APP_GNOSIS_SAFE_SINGLETON_ADDRESS,
	REACT_APP_AUCTION_ADDRESS,
	REACT_APP_USUL_MASTERCOPY_ADDRESS,
	REACT_APP_MODULE_FACTORY_ADDRESS,
	REACT_APP_OZ_LINEAR_MASTER_ADDRESS,
	REACT_APP_MULTI_SEND_ADDRESS
} = process.env
/* eslint-enable no-process-env */
if (REACT_APP_CLOUD_FUNCTIONS_URL && !REACT_APP_CLOUD_FUNCTIONS_URL.match(urlRegex)) {
	throw new Error("Env variable REACT_APP_CLOUD_FUNCTIONS_URL is malformed: URL expected")
}

if (REACT_APP_IPFS_ENDPOINT && !REACT_APP_IPFS_ENDPOINT.match(urlRegex)) {
	throw new Error("Env variable REACT_APP_IPFS_ENDPOINT is malformed: URL expected")
}
if (isNaN(Number(REACT_APP_CHAIN_ID))) {
	throw new Error("Env variable REACT_APP_CHAIN_ID is malformed: number expected")
}
if (REACT_APP_DOMAIN_ADDRESS && !isAddress(REACT_APP_DOMAIN_ADDRESS)) {
	throw new Error("Env variable REACT_APP_DOMAIN_ADDRESS is malformed: address expected")
}
if (
	REACT_APP_GNOSIS_SAFE_PROXY_FACTORY_ADDRESS &&
	!isAddress(REACT_APP_GNOSIS_SAFE_PROXY_FACTORY_ADDRESS)
) {
	throw new Error(
		"Env variable REACT_APP_GNOSIS_SAFE_PROXY_FACTORY_ADDRESS is malformed: address expected"
	)
}
if (
	REACT_APP_GNOSIS_SAFE_SINGLETON_ADDRESS &&
	!isAddress(REACT_APP_GNOSIS_SAFE_SINGLETON_ADDRESS)
) {
	throw new Error(
		"Env variable REACT_APP_GNOSIS_SAFE_SINGLETON_ADDRESS is malformed: address expected"
	)
}
if (REACT_APP_AUCTION_ADDRESS && !isAddress(REACT_APP_AUCTION_ADDRESS)) {
	throw new Error("Env variable REACT_APP_AUCTION_ADDRESS is malformed: address expected")
}
if (REACT_APP_USUL_MASTERCOPY_ADDRESS && !isAddress(REACT_APP_USUL_MASTERCOPY_ADDRESS)) {
	throw new Error("Env variable REACT_APP_USUL_MASTERCOPY_ADDRESS is malformed: address expected")
}
if (REACT_APP_MODULE_FACTORY_ADDRESS && !isAddress(REACT_APP_MODULE_FACTORY_ADDRESS)) {
	throw new Error("Env variable REACT_APP_MODULE_FACTORY_ADDRESS is malformed: address expected")
}
if (REACT_APP_OZ_LINEAR_MASTER_ADDRESS && !isAddress(REACT_APP_OZ_LINEAR_MASTER_ADDRESS)) {
	throw new Error("Env variable REACT_APP_OZ_LINEAR_MASTER_ADDRESS is malformed: address expected")
}
if (REACT_APP_MULTI_SEND_ADDRESS && !isAddress(REACT_APP_MULTI_SEND_ADDRESS)) {
	throw new Error("Env variable REACT_APP_MULTI_SEND_ADDRESS is malformed: address expected")
}

const firebaseConfig = {
	FIREBASE_API_KEY: REACT_APP_FIREBASE_API_KEY,
	FIREBASE_AUTH_DOMAIN: REACT_APP_FIREBASE_AUTH_DOMAIN,
	FIREBASE_PROJECT_ID: REACT_APP_FIREBASE_PROJECT_ID,
	FIREBASE_STORAGE_BUCKET: REACT_APP_FIREBASE_STORAGE_BUCKET,
	FIREBASE_MESSAGING_SENDER_ID: REACT_APP_FIREBASE_MESSAGING_SENDER_ID,
	FIREBASE_APP_ID: REACT_APP_FIREBASE_APP_ID
}

const config = {
	CLOUD_FUNCTIONS_URL: REACT_APP_CLOUD_FUNCTIONS_URL,
	IPFS_ENDPOINT: REACT_APP_IPFS_ENDPOINT,
	...(REACT_APP_CHAIN_ID === undefined ? {} : {CHAIN_ID: Number(REACT_APP_CHAIN_ID)}),
	INFURA_NETWORK: REACT_APP_INFURA_NETWORK,
	INFURA_ID: REACT_APP_INFURA_ID,
	DOMAIN_ADDRESS: REACT_APP_DOMAIN_ADDRESS,
	GNOSIS_SAFE_PROXY_FACTORY_ADDRESS: REACT_APP_GNOSIS_SAFE_PROXY_FACTORY_ADDRESS,
	GNOSIS_SAFE_SINGLETON_ADDRESS: REACT_APP_GNOSIS_SAFE_SINGLETON_ADDRESS,
	AUCTION_ADDRESS: REACT_APP_AUCTION_ADDRESS,
	USUL_MASTERCOPY_ADDRESS: REACT_APP_USUL_MASTERCOPY_ADDRESS,
	MODULE_FACTORY_ADDRESS: REACT_APP_MODULE_FACTORY_ADDRESS,
	OZ_LINEAR_MASTER_ADDRESS: REACT_APP_OZ_LINEAR_MASTER_ADDRESS,
	MULTI_SEND_ADDRESS: REACT_APP_MULTI_SEND_ADDRESS
}

export default {
	...DEFAULT_CONFIG,
	config,
	firebase: {
		...DEFAULT_FIREBASE_CONFIG,
		...firebaseConfig
	}
}
